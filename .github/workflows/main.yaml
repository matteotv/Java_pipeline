# This is a basic workflow to help you get started with Actions

name: CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 17

      - name: Set up MongoDb
        run: |
          docker-compose up -d mongodb
          docker ps -a
          
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      # Runs a set of commands using the runners shell
      - name: build java application 
        run: mvn clean verify
        
  test:
    needs: build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Set up JDK
        uses: graalvm/setup-graalvm@v1
        with:
          version: ${{ '21.3.0' }}
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up MongoDb
        run: |
          docker-compose up -d mongodb
          docker ps -a
          
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      # Runs a set of commands using the runners shell
      - name: Unit-test java application 
        run: |
             mvn clean verify
             mvn test -Pfunctional-test
             
      - name: Integration-test java application 
        run: |
              mvn clean package -DskipTests -P "spring-native,build-native-image"
              .\target\com.example.demo.demoapplication.exe &
              sleep 10
              mvn test -Pfunctional-test
        
    


