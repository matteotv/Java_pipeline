# This is a basic workflow to help you get started with Actions

name: CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  buildAndTest:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 17

      - name: Set up MongoDb
        run: |
          docker-compose up -d mongodb
          docker ps -a
          
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      # Runs a set of commands using the runners shell
      - name: build java application 
        run: mvn clean verify
        
  build-docker-image:
    needs: buildAndTest
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 17

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build Docker Image
        run: mvn clean spring-boot:build-image -DskipTests -Pspring-native,build-docker-image

      - name: Run App in Docker
        run: |
          docker-compose up -d
          sleep 10
          docker ps -a
      - name: Run FunctionalTests
        run: |
          mvn test -Pfunctional-test
        
  IntegrationTest:
    needs: build-docker-image
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Set up JDK
        uses: graalvm/setup-graalvm@v1
        with:
          version:  latest
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up MongoDb
        run: |
          docker-compose up -d mongodb
          docker ps -a
             
      - name: Integration test java application 
        run: |
              mvn clean package -DskipTests -Pspring-native,build-native-image
              ./target/com.example.demo.demoapplication &
              sleep 10
              mvn test -Pfunctional-test
              
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: demoapplication-ubuntu-latest
          path: target/com.example.demo.demoapplication*  
          
          
  deploy:
    needs: IntegrationTest
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1.2.1

      - uses: actions/download-artifact@v2
        with:
          name: lambdatest.zip
          path: output

      - name: provision Lambda
        run: | 
              cp ./output/lambdatest.zip ./terraform/lambdatest.zip
              cd terraform 
              terraform init
              export TF_VAR_access_key="${{secrets.ACCESS_KEY}}"
              export TF_VAR_secret_key="${{secrets.SECRET_KEY}}"
              terraform apply --auto-approve
              sleep 10
              terraform destroy --auto-approve 
        
    


